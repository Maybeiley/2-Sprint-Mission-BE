// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  nickname  String    @unique
  password  String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Article   Article[]
  Product   Product[]
  Comment   Comment[]
  Like      Like[]
}

model Article {
  id        String    @id @default(uuid())
  writer    User?     @relation(fields: [writerId], references: [id], onDelete: SetNull)
  writerId  String?
  title     String
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Like      Like[]
}

model Product {
  id          String    @id @default(uuid())
  owner       User?     @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId     String?
  name        String
  description String
  price       Int
  tags        String[]
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comment     Comment[]
  Like        Like[]
}

model Comment {
  id        String   @id @default(uuid())
  writer    User?    @relation(fields: [writerId], references: [id], onDelete: SetNull)
  writerId  String?
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  articleId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  articleId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@unique([userId, articleId])
}
